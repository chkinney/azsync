name: Release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  # Create the release separately so it is only created once
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    # Enable for testing
    # env:
    #   OVERRIDE_VERSION: 0.0.0-ignore-me
    outputs:
      app_version: ${{ steps.get_version.outputs.version }}
      tag_name: ${{ steps.get_version.outputs.version }}
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get version
        id: get_version
        run: |
          TAG_VERSION="${GITHUB_REF/refs\/tags\//}"
          echo 'version=${OVERRIDE_VERSION:-$TAG_VERSION}' >> $GITHUB_OUTPUT
      - name: Create release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.get_version.outputs.version }}
          tag_name: ${{ steps.get_version.outputs.version }}
          prerelease: true # TODO: remove this on v1 release
          files: |
            LICENSE-MIT
            LICENSE-APACHE

  # Build the artifacts
  release:
    name: Create release
    needs: [create-release]
    runs-on: ${{ matrix.os }}
    env:
      RUST_BACKTRACE: 1
      TARGET_DIR: ./target/${{ matrix.target }}
    strategy:
      fail-fast: true
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-apple-darwin
          - x86_64-pc-windows-msvc
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            rust: stable
          - target: aarch64-apple-darwin
            os: macos-latest
            rust: stable
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            rust: stable
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}
      - name: Build release
        run: cargo build --verbose --release --target ${{ matrix.target }}
      - name: Create archive
        id: create_archive
        shell: bash
        run: |
          # Create artifact directory
          ARTIFACT_DIR="azsync-${{ needs.create-release.outputs.app_version }}-${{ matrix.target }}"
          mkdir -p "$ARTIFACT_DIR"

          # Copy documentation files into artifact directory
          cp README.md "$ARTIFACT_DIR"
          cp LICENSE-MIT "$ARTIFACT_DIR"
          cp LICENSE-APACHE "$ARTIFACT_DIR"

          # Copy binary into artifact directory
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "$TARGET_DIR/release/azsync.exe" "$ARTIFACT_DIR/"
            7z a "$ARTIFACT_DIR.zip" "$ARTIFACT_DIR"
            echo ::set-output name=asset::$ARTIFACT_DIR.zip
          else
            cp "$TARGET_DIR/release/azsync" "$ARTIFACT_DIR/"
            tar -czf "$ARTIFACT_DIR.tar.gz" "$ARTIFACT_DIR"
            echo ::set-output name=asset::$ARTIFACT_DIR.tar.gz
          fi
      - name: Upload archive
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.tag_name }}
          files: ${{ steps.create_archive.outputs.asset }}
